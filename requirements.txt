| 内容                  | 補足                             |
| ------------------- | ------------------------------ |
| データ読み込み & 前処理       | `pandas`, `scikit-learn` で加工済み |
| 売上予測モデル（sales）      | `RandomForestRegressor`        |
| スタッフレベル予測モデル（staff） | `RandomForestRegressor`        |
| モデル保存               | `joblib.dump()`で `.pkl` 保存推奨   |




| モジュール               | クラスと役割                                  |
| ------------------- | --------------------------------------- |
| `predictor.py`      | `Predictor`：予測モデルを読み込んで `.predict()` 実行 |
| `data_formatter.py` | 入力されたデータ（複数日）を正しいDataFrameに整形（オプション）    |
| `evaluator.py`      | MSE・R²・可視化などをまとめる（任意）                   |




| 機能              | 説明                    |
| --------------- | --------------------- |
| `/predict/day`  | 1日の予測API（売上・スタッフ数）    |
| `/predict/week` | 1週間分の予測API            |
| `/evaluate`     | モデルの評価結果表示（オプション）     |
| `/dashboard`    | 結果をHTML/グラフで可視化（将来的に） |





| ツール               | 内容                      |
| ----------------- | ----------------------- |
| Flask + Jinja2    | HTMLテンプレートでページを作成       |
| Bootstrap         | UIをキレイに整える              |
| Chart.js や Plotly | グラフ表示に活用できる             |
| JavaScript / AJAX | JSON経由で非同期に予測を表示することも可能 |




| 内容               | 説明                    |
| ---------------- | --------------------- |
| 動作確認             | Flask上でPOSTテスト、結果チェック |
| 説明資料作成           | 使用技術・特徴・学びを書いておく      |
| GitHubで公開        | コード管理 & 提出用           |
| Heroku等でデプロイ（任意） | 公開したい場合は簡易デプロイもあり     |

